// <%= pbm.url %>

#include <bits/stdc++.h>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

<% if pbm.options.interactive -%>
#define DEBUG
<% end -%>
#define REP(i,n)   for(int i=0; i<(int)(n); i++)
#define FOR(i,b,e) for(int i=(b); i<=(int)(e); i++)
#if ONLINE_JUDGE
  #define DUMP(a)
  #define DUMP2D(b)
#else
  #define _GLIBCXX_DEBUG
  #define DUMP(a) REP(_i, a.size()) cout << a[_i] << (_i + 1 == a.size() ? "\n" : " ")
  #define DUMP2D(b) REP(_j, b.size()) DUMP(b[_j]); cout << endl
#endif

<% if pbm.options.interactive -%>
//------------------------------------------------------------------------------
#ifdef DEBUG
string source;
vector<string> responses;
#endif

string query(string req) {
  cout << "? " << req << endl;
  string res;
#ifdef DEBUG
  res = "*** generate response from source ***";
  responses.push_back(res);
#else
  cin >> res;
#endif
  return res;
}

//------------------------------------------------------------------------------
<% end -%>
<% unless (consts = gen_consts).empty?  -%>
<% consts.each do |line| -%>
<%= line %>
<% end -%>

<% end -%>
<% unless (global_decls = gen_global_decls).empty? -%>
<% global_decls.each do |line| -%>
<%= line %>
<% end -%>

<% end -%>
int main() {
<% gen_local_decls.each do |line| -%>
  <%= line %>
<% end -%>
<% if pbm.options.interactive -%>
#ifdef DEBUG
  cin >> source;
#endif
<% end -%>

<% if pbm.options.interactive -%>
  string ans;
  cout << "! " << ans << endl;
#ifdef DEBUG
  cout << "query count: " << responses.size() << endl;
  cout << "query results:" << endl;
  for (string res : responses) cout << res << endl;
#endif
<% elsif (vs = pbm.options.binary_values) -%>
  bool cond = false;
  cout << (cond ? "<%= vs[0] %>" : "<%= vs[1] %>") << endl;
<% else -%>
  int ans = 0;
  cout << ans << endl;
<% end -%>
}
